# for API reqs, in worker
opendota.STEAM_API_KEY=
# for getting replay salt/profile data, in retriever
opendota.STEAM_USER=
opendota.STEAM_PASS=
# for specifying the file that should be run when entry point is invoked
opendota.ROLE=
# for specifying the group of apps that should be run when entry point is invoked
opendota.GROUP=
# truthy: use sequence number stored in redis, else: use approximate value from live API
opendota.START_SEQ_NUM=
# The cloud provider used by the application (determines how environment data is downloaded)
opendota.PROVIDER=
# The URL to read Steam account data from
opendota.STEAM_ACCOUNT_DATA=
opendota.NODE_ENV=development
opendota.FRONTEND_PORT=5000
opendota.RETRIEVER_PORT=5100
opendota.PARSER_PORT=5200
opendota.PROXY_PORT=5300
# base url to redirect to after steam oauth login
opendota.ROOT_URL=http:#localhost:5000
# Comma separated list of retriever hosts (access to Dota 2 GC data)
opendota.RETRIEVER_HOST=localhost:5100
# Comma separated list of retriever hosts dedicated for gcdata job
opendota.GCDATA_RETRIEVER_HOST=
# host of the parse server
opendota.PARSER_HOST=http:#localhost:5600
# The host of the UI, target of /logout and /return
opendota.UI_HOST=
opendota.PROXY_URLS=# comma separated list of proxy urls to use
# comma separated list of hosts to fetch Steam API data from
opendota.STEAM_API_HOST=api.steampowered.com
# connection string for PostgreSQL
opendota.POSTGRES_URL=postgresql:#postgres:postgres@localhost/yasp
opendota.POSTGRES_TEST_URL=postgresql:#postgres:postgres@localhost/yasp_test
# readonly connection string for PostgreSQL
opendota.READONLY_POSTGRES_URL=postgresql:#readonly:readonly@localhost/yasp
# connection string for Redis
opendota.REDIS_URL=redis:#127.0.0.1:6379/0
opendota.REDIS_TEST_URL=redis:#127.0.0.1:6379/1
# connection string for Cassandra
opendota.CASSANDRA_URL=cassandra:#localhost/yasp
opendota.CASSANDRA_TEST_URL=cassandra:#localhost/yasp_test
opendota.ELASTICSEARCH_URL=localhost:9200
opendota.INIT_POSTGRES_HOST=localhost
opendota.INIT_CASSANDRA_HOST=localhost
# string to use as shared secret with retriever/parser
opendota.RETRIEVER_SECRET=
# string to encrypt cookies
opendota.SESSION_SECRET=secret to encrypt cookies with
# domain to use for the cookie.  Use e.g. '.opendota.com' to share cookie across subdomains
opendota.COOKIE_DOMAIN=
# The number of days a user is tracked for after every visit
opendota.UNTRACK_DAYS=30
# The cheese goal
opendota.GOAL=5
# minutes between requests for MMStats data
opendota.MMSTATS_DATA_INTERVAL=3
# delay between API requests
opendota.DEFAULT_DELAY=1000
# delay for scanner API requests (stricter rate limit)
opendota.SCANNER_DELAY=2000
# Number of simultaneous MMR requests to make (per retriever)
opendota.MMR_PARALLELISM=10
# Number of simultaneous parse jobs to run (per parser)
opendota.PARSER_PARALLELISM=1
# minutes in block to retain benchmark data for percentile
opendota.BENCHMARK_RETENTION_MINUTES=60
# percent of inserted matches to randomly queue for GC data
opendota.GCDATA_PERCENT=0
# percent of matches to insert from scanner
opendota.SCANNER_PERCENT=100
# percent of public matches to sample in DB
opendota.PUBLIC_SAMPLE_PERCENT=10
# percent of parsed matches to sample for scenarios
opendota.SCENARIOS_SAMPLE_PERCENT=100
# percent of parsed matches to sample for benchmarks
opendota.BENCHMARKS_SAMPLE_PERCENT=100
# set to enable caching matches in Redis
opendota.ENABLE_MATCH_CACHE=
# enable/disable player aggregation caching
opendota.ENABLE_PLAYER_CACHE=1
# set to request MMR updates after ranked matches
opendota.ENABLE_RANDOM_MMR_UPDATE=
# maximum allowed age of scenarios rows in weeks
opendota.MAXIMUM_AGE_SCENARIOS_ROWS=4
# number of seconds to cache matches
opendota.MATCH_CACHE_SECONDS=60
# number of seconds to cache player aggregations
opendota.PLAYER_CACHE_SECONDS=1800
# percent of matches from scanner to insert player account IDs for (discover new player account IDs)
opendota.SCANNER_PLAYER_PERCENT=100
# set to enable retriever two-factor and SteamGuard authentication,
opendota.ENABLE_RETRIEVER_ADVANCED_AUTH=
# if truthy, API calls after exceeding API_FREE_LIMIT are blocked
opendota.ENABLE_API_LIMIT=
# number of api requests per month before 429 is returned. If using an API key, calls over this are charged.
opendota.API_FREE_LIMIT=50000
# how many calls is equivalent to a unit of calls e.g. 100 calls per $0.01.
opendota.API_BILLING_UNIT=100
# Rate limit per minute if using an API key
opendota.API_KEY_PER_MIN_LIMIT=300
# Rate limit per minute if not using an API key
opendota.NO_API_KEY_PER_MIN_LIMIT=60
# Whitelisted, comma separated account IDs to access /admin* routes
opendota.ADMIN_ACCOUNT_IDS=
# percent of replay salts to fetch from backup data source
opendota.BACKUP_RETRIEVER_PERCENT=0
# Number of simultaneous GC match details requests to make (per retriever)
opendota.GCDATA_PARALLELISM=1
# for stripe payment processing (kept on server)
opendota.STRIPE_SECRET=rk_test_gRqwhv4xqv0a1olp8kk8fZ94
# plan id for stripe metering
opendota.STRIPE_API_PLAN=plan_CgLthOgwrDgz2K
# % of users to roll out elasticsearch to
opendota.ES_SEARCH_PERCENT=0
# Timeout in milliseconds when calling a webhook
opendota.WEBHOOK_TIMEOUT=1000
# Delay in milliseconds between reads from the match feed for the webhook handler.
opendota.WEBHOOK_FEED_INTERVAL=2000
# URL where account IDs of tracked players can be found
opendota.TRACKED_ACCOUNT_URL=